// import 'package:flutter/material.dart';
// import 'package:intl/intl.dart';
//
// class ParsedBarcodeScreen extends StatelessWidget {
//   final Map<String, String> parsedData;
//   final String rawBarcode;
//
//   ParsedBarcodeScreen({super.key, required this.parsedData, required this.rawBarcode});
//
//   // AI code to name and description mapping
//   final Map<String, String> aiDescriptionMap = {
//     '00': 'SSCC',
//     '01': 'GTIN',
//     '02': 'Content',
//     '03': 'MtO GTIN',
//     '10': 'Batch No',
//     '11': 'Prod Date',
//     '12': 'Due Date',
//     '13': 'Pack Date',
//     '15': 'Best Before',
//     '16': 'Sell By',
//     '17': 'Expiry Date',
//     '20': 'Variant',
//     '21': 'Serial No',
//     '22': 'CPV',
//     '235': 'TPX',
//     '240': 'Additional ID',
//     '241': 'Cust.Part No.',
//     '242': 'MTO Variant',
//     '243': 'PCN',
//     '250': 'Secondary Serial',
//     '251': 'Ref to Source',
//     '253': 'GDTI',
//     '254': 'GLN Extension',
//     '255': 'GCN',
//     '30': 'Var Count',
//     '3100': 'Net Weight (kg)',
//     '3101': 'Net Weight (kg)',
//     '3102': 'Net Weight (kg)',
//     '3103': 'Net Weight (kg)',
//     '3104': 'Net Weight (kg)',
//     '3105': 'Net Weight (kg)',
//     '3110': 'Length (m)',
//     '3111': 'Length (m)',
//     '3112': 'Length (m)',
//     '3113': 'Length (m)',
//     '3114': 'Length (m)',
//     '3115': 'Length (m)',
//     '3120': 'Width (m)',
//     '3121': 'Width (m)',
//     '3122': 'Width (m)',
//     '3123': 'Width (m)',
//     '3124': 'Width (m)',
//     '3125': 'Width (m)',
//     '3130': 'Height (m)',
//     '3131': 'Height (m)',
//     '3132': 'Height (m)',
//     '3133': 'Height (m)',
//     '3134': 'Height (m)',
//     '3135': 'Height (m)',
//     '3140': 'Area (m²)',
//     '3141': 'Area (m²)',
//     '3142': 'Area (m²)',
//     '3143': 'Area (m²)',
//     '3144': 'Area (m²)',
//     '3145': 'Area (m²)',
//     '3150': 'Net Volume (l)',
//     '3151': 'Net Volume (l)',
//     '3152': 'Net Volume (l)',
//     '3153': 'Net Volume (l)',
//     '3154': 'Net Volume (l)',
//     '3155': 'Net Volume (l)',
//     '3160': 'Net Volume (m³)',
//     '3161': 'Net Volume (m³)',
//     '3162': 'Net Volume (m³)',
//     '3163': 'Net Volume (m³)',
//     '3164': 'Net Volume (m³)',
//     '3165': 'Net Volume (m³)',
//     '3200': 'Net Weight (lb)',
//     '3201': 'Net Weight (lb)',
//     '3202': 'Net Weight (lb)',
//     '3203': 'Net Weight (lb)',
//     '3204': 'Net Weight (lb)',
//     '3205': 'Net Weight (lb)',
//     '3210': 'Length (in)',
//     '3211': 'Length (in)',
//     '3212': 'Length (in)',
//     '3213': 'Length (in)',
//     '3214': 'Length (in)',
//     '3215': 'Length (in)',
//     '3220': 'Length (ft)',
//     '3221': 'Length (ft)',
//     '3222': 'Length (ft)',
//     '3223': 'Length (ft)',
//     '3224': 'Length (ft)',
//     '3225': 'Length (ft)',
//     '3230': 'Length (yd)',
//     '3231': 'Length (yd)',
//     '3232': 'Length (yd)',
//     '3233': 'Length (yd)',
//     '3234': 'Length (yd)',
//     '3235': 'Length (yd)',
//     '3240': 'Width (in)',
//     '3241': 'Width (in)',
//     '3242': 'Width (in)',
//     '3243': 'Width (in)',
//     '3244': 'Width (in)',
//     '3245': 'Width (in)',
//     '3250': 'Width (ft)',
//     '3251': 'Width (ft)',
//     '3252': 'Width (ft)',
//     '3253': 'Width (ft)',
//     '3254': 'Width (ft)',
//     '3255': 'Width (ft)',
//     '3260': 'Width (yd)',
//     '3261': 'Width (yd)',
//     '3262': 'Width (yd)',
//     '3263': 'Width (yd)',
//     '3264': 'Width (yd)',
//     '3265': 'Width (yd)',
//     '3270': 'Height (in)',
//     '3271': 'Height (in)',
//     '3272': 'Height (in)',
//     '3273': 'Height (in)',
//     '3274': 'Height (in)',
//     '3275': 'Height (in)',
//     '3280': 'Height (ft)',
//     '3281': 'Height (ft)',
//     '3282': 'Height (ft)',
//     '3283': 'Height (ft)',
//     '3284': 'Height (ft)',
//     '3285': 'Height (ft)',
//     '3290': 'Height (yd)',
//     '3291': 'Height (yd)',
//     '3292': 'Height (yd)',
//     '3293': 'Height (yd)',
//     '3294': 'Height (yd)',
//     '3295': 'Height (yd)',
//     '3300': 'Gross Weight (kg)',
//     '3301': 'Gross Weight (kg)',
//     '3302': 'Gross Weight (kg)',
//     '3303': 'Gross Weight (kg)',
//     '3304': 'Gross Weight (kg)',
//     '3305': 'Gross Weight (kg)',
//     '3310': 'Length (m), log',
//     '3311': 'Length (m), log',
//     '3312': 'Length (m), log',
//     '3313': 'Length (m), log',
//     '3314': 'Length (m), log',
//     '3315': 'Length (m), log',
//     '3320': 'Width (m), log',
//     '3321': 'Width (m), log',
//     '3322': 'Width (m), log',
//     '3323': 'Width (m), log',
//     '3324': 'Width (m), log',
//     '3325': 'Width (m), log',
//     '3330': 'Height (m), log',
//     '3331': 'Height (m), log',
//     '3332': 'Height (m), log',
//     '3333': 'Height (m), log',
//     '3334': 'Height (m), log',
//     '3335': 'Height (m), log',
//     '3340': 'Area (m²), log',
//     '3341': 'Area (m²), log',
//     '3342': 'Area (m²), log',
//     '3343': 'Area (m²), log',
//     '3344': 'Area (m²), log',
//     '3345': 'Area (m²), log',
//     '3350': 'Volume (l), log',
//     '3351': 'Volume (l), log',
//     '3352': 'Volume (l), log',
//     '3353': 'Volume (l), log',
//     '3354': 'Volume (l), log',
//     '3355': 'Volume (l), log',
//     '3360': 'Volume (m³), log',
//     '3361': 'Volume (m³), log',
//     '3362': 'Volume (m³), log',
//     '3363': 'Volume (m³), log',
//     '3364': 'Volume (m³), log',
//     '3365': 'Volume (m³), log',
//     '3400': 'Gross Weight (lb)',
//     '3401': 'Gross Weight (lb)',
//     '3402': 'Gross Weight (lb)',
//     '3403': 'Gross Weight (lb)',
//     '3404': 'Gross Weight (lb)',
//     '3405': 'Gross Weight (lb)',
//     '3453': 'WIDTH (ft), log',
//     '3454': 'WIDTH (ft), log',
//     '3455': 'WIDTH (ft), log',
//     '3460': 'WIDTH (yd), log',
//     '3461': 'WIDTH (yd), log',
//     '3462': 'WIDTH (yd), log',
//     '3463': 'WIDTH (yd), log',
//     '3464': 'WIDTH (yd), log',
//     '3465': 'WIDTH (yd), log',
//     '3470': 'HEIGHT (in), log',
//     '3471': 'HEIGHT (in), log',
//     '3472': 'HEIGHT (in), log',
//     '3473': 'HEIGHT (in), log',
//     '3474': 'HEIGHT (in), log',
//     '3475': 'HEIGHT (in), log',
//     '3480': 'HEIGHT (ft), log',
//     '3481': 'HEIGHT (ft), log',
//     '3482': 'HEIGHT (ft), log',
//     '3483': 'HEIGHT (ft), log',
//     '3484': 'HEIGHT (ft), log',
//     '3485': 'HEIGHT (ft), log',
//     '3490': 'HEIGHT (yd), log',
//     '3491': 'HEIGHT (yd), log',
//     '3492': 'HEIGHT (yd), log',
//     '3493': 'HEIGHT (yd), log',
//     '3494': 'HEIGHT (yd), log',
//     '3495': 'HEIGHT (yd), log',
//     '3500': 'AREA (in²)',
//     '3501': 'AREA (in²)',
//     '3502': 'AREA (in²)',
//     '3503': 'AREA (in²)',
//     '3504': 'AREA (in²)',
//     '3505': 'AREA (in²)',
//     '3510': 'AREA (ft²)',
//     '3511': 'AREA (ft²)',
//     '3512': 'AREA (ft²)',
//     '3513': 'AREA (ft²)',
//     '3514': 'AREA (ft²)',
//     '3515': 'AREA (ft²)',
//     '3520': 'AREA (yd²)',
//     '3521': 'AREA (yd²)',
//     '3522': 'AREA (yd²)',
//     '3523': 'AREA (yd²)',
//     '3524': 'AREA (yd²)',
//     '3525': 'AREA (yd²)',
//     '3530': 'AREA (in²), log',
//     '3531': 'AREA (in²), log',
//     '3532': 'AREA (in²), log',
//     '3533': 'AREA (in²), log',
//     '3534': 'AREA (in²), log',
//     '3535': 'AREA (in²), log',
//     '3540': 'AREA (ft²), log',
//     '3541': 'AREA (ft²), log',
//     '3542': 'AREA (ft²), log',
//     '3543': 'AREA (ft²), log',
//     '3544': 'AREA (ft²), log',
//     '3545': 'AREA (ft²), log',
//     '3550': 'AREA (yd²), log',
//     '3551': 'AREA (yd²), log',
//     '3552': 'AREA (yd²), log',
//     '3553': 'AREA (yd²), log',
//     '3554': 'AREA (yd²), log',
//     '3555': 'AREA (yd²), log',
//     '3560': 'NET WEIGHT (troy oz)',
//     '3561': 'NET WEIGHT (troy oz)',
//     '3562': 'NET WEIGHT (troy oz)',
//     '3563': 'NET WEIGHT (troy oz)',
//     '3564': 'NET WEIGHT (troy oz)',
//     '3565': 'NET WEIGHT (troy oz)',
//     '3570': 'NET VOLUME (oz)',
//     '3571': 'NET VOLUME (oz)',
//     '3572': 'NET VOLUME (oz)',
//     '3573': 'NET VOLUME (oz)',
//     '3574': 'NET VOLUME (oz)',
//     '3575': 'NET VOLUME (oz)',
//     '3600': 'NET VOLUME (qt)',
//     '3601': 'NET VOLUME (qt)',
//     '3602': 'NET VOLUME (qt)',
//     '3603': 'NET VOLUME (qt)',
//     '3604': 'NET VOLUME (qt)',
//     '3605': 'NET VOLUME (qt)',
//     '3610': 'NET VOLUME (gal.)',
//     '3611': 'NET VOLUME (gal.)',
//     '3612': 'NET VOLUME (gal.)',
//     '3613': 'NET VOLUME (gal.)',
//     '3614': 'NET VOLUME (gal.)',
//     '3615': 'NET VOLUME (gal.)',
//     '3620': 'VOLUME (qt), log',
//     '3621': 'VOLUME (qt), log',
//     '3622': 'VOLUME (qt), log',
//     '3623': 'VOLUME (qt), log',
//     '3624': 'VOLUME (qt), log',
//     '3625': 'VOLUME (qt), log',
//     '3630': 'VOLUME (gal.), log',
//     '3631': 'VOLUME (gal.), log',
//     '3632': 'VOLUME (gal.), log',
//     '3633': 'VOLUME (gal.), log',
//     '3634': 'VOLUME (gal.), log',
//     '3635': 'VOLUME (gal.), log',
//     '3640': 'VOLUME (in³)',
//     '3641': 'VOLUME (in³)',
//     '3642': 'VOLUME (in³)',
//     '3643': 'VOLUME (in³)',
//     '3644': 'VOLUME (in³)',
//     '3645': 'VOLUME (in³)',
//     '3650': 'VOLUME (ft³)',
//     '3651': 'VOLUME (ft³)',
//     '3652': 'VOLUME (ft³)',
//     '3653': 'VOLUME (ft³)',
//     '3654': 'VOLUME (ft³)',
//     '3655': 'VOLUME (ft³)',
//     '3660': 'VOLUME (yd³)',
//     '3661': 'VOLUME (yd³)',
//     '3662': 'VOLUME (yd³)',
//     '3663': 'VOLUME (yd³)',
//     '3664': 'VOLUME (yd³)',
//     '3665': 'VOLUME (yd³)',
//     '3670': 'VOLUME (in³), log',
//     '3671': 'VOLUME (in³), log',
//     '3672': 'VOLUME (in³), log',
//     '3673': 'VOLUME (in³), log',
//     '3674': 'VOLUME (in³), log',
//     '3675': 'VOLUME (in³), log',
//     '3680': 'VOLUME (ft³), log',
//     '3681': 'VOLUME (ft³), log',
//     '3682': 'VOLUME (ft³), log',
//     '3683': 'VOLUME (ft³), log',
//     '3684': 'VOLUME (ft³), log',
//     '3685': 'VOLUME (ft³), log',
//     '3690': 'VOLUME (yd³), log',
//     '3691': 'VOLUME (yd³), log',
//     '3692': 'VOLUME (yd³), log',
//     '3693': 'VOLUME (yd³), log',
//     '3694': 'VOLUME (yd³), log',
//     '3695': 'VOLUME (yd³), log',
//     '37': 'COUNT',
//     '3900': 'AMOUNT',
//     '3901': 'AMOUNT',
//     '3902': 'AMOUNT',
//     '3903': 'AMOUNT',
//     '3904': 'AMOUNT',
//     '3905': 'AMOUNT',
//     '3906': 'AMOUNT',
//     '3907': 'AMOUNT',
//     '3908': 'AMOUNT',
//     '3909': 'AMOUNT',
//     '3910': 'AMOUNT',
//     '3911': 'AMOUNT',
//     '3912': 'AMOUNT',
//     '3913': 'AMOUNT',
//     '3914': 'AMOUNT',
//     '3915': 'AMOUNT',
//     '3916': 'AMOUNT',
//     '3917': 'AMOUNT',
//     '3918': 'AMOUNT',
//     '3919': 'AMOUNT',
//     '3920': 'PRICE',
//     '3921': 'PRICE',
//     '3922': 'PRICE',
//     '3923': 'PRICE',
//     '3924': 'PRICE',
//     '3925': 'PRICE',
//     '3926': 'PRICE',
//     '3927': 'PRICE',
//     '3928': 'PRICE',
//     '3929': 'PRICE',
//     '3930': 'PRICE',
//     '3931': 'PRICE',
//     '3932': 'PRICE',
//     '3933': 'PRICE',
//     '3934': 'PRICE',
//     '3935': 'PRICE',
//     '3936': 'PRICE',
//     '3937': 'PRICE',
//     '3938': 'PRICE',
//     '3939': 'PRICE',
//     '3940': 'PRCNT OFF',
//     '3941': 'PRCNT OFF',
//     '3942': 'PRCNT OFF',
//     '3943': 'PRCNT OFF',
//     '3950': 'PRICE/UoM',
//     '3951': 'PRICE/UoM',
//     '3952': 'PRICE/UoM',
//     '3953': 'PRICE/UoM',
//     '3954': 'PRICE/UoM',
//     '3955': 'PRICE/UoM',
//     '400': 'ORDER NUMBER',
//     '401': 'GINC',
//     '402': 'GSIN',
//     '403': 'ROUTE',
//     '410': 'SHIP TO LOC',
//     '411': 'BILL TO',
//     '412': 'PURCHASE FROM',
//     '413': 'SHIP FOR LOC',
//     '414': 'LOC No.',
//     '415': 'PAY TO',
//     '416': 'PROD/SERV LOC',
//     '417': 'PARTY',
//     '420': 'SHIP TO POST',
//     '421': 'SHIP TO POST',
//     '422': 'ORIGIN',
//     '423': 'COUNTRY INITIAL PROCESS',
//     '424': 'COUNTRY PROCESS',
//     '425': 'COUNTRY DISASSEMBLY',
//     '426': 'COUNTRY FULL PROCESS',
//     '427': 'ORIGIN SUBDIVISION',
//     '4300': 'SHIP TO COMP',
//     '4301': 'SHIP TO NAME',
//     '4302': 'SHIP TO ADD1',
//     '4303': 'SHIP TO ADD2',
//     '4304': 'SHIP TO SUB',
//     '4305': 'SHIP TO LOC',
//     '4306': 'SHIP TO REG',
//     '4307': 'SHIP TO COUNTRY',
//     '4308': 'SHIP TO PHONE',
//     '4309': 'SHIP TO GEO',
//     '4310': 'RTN TO COMP',
//     '4311': 'RTN TO NAME',
//     '4312': 'RTN TO ADD1',
//     '4313': 'RTN TO ADD2',
//     '4314': 'RTN TO SUB',
//     '4315': 'RTN TO LOC',
//     '4316': 'RTN TO REG',
//     '4317': 'RTN TO COUNTRY',
//     '4318': 'RTN TO POST',
//     '4319': 'RTN TO PHONE',
//     '4320': 'SRV DESCRIPTION',
//     '4321': 'DANGEROUS GOODS',
//     '4322': 'AUTH LEAVE',
//     '4323': 'SIG REQUIRED',
//     '4324': 'NBEF DEL DT',
//     '4325': 'NAFT DEL DT',
//     '4326': 'REL DATE',
//     '4330': 'MAX TEMP F',
//     '4331': 'MAX TEMP C',
//     '4332': 'MIN TEMP F',
//     '4333': 'MIN TEMP C',
//     '7001': 'NSN',
//     '7002': 'MEAT CUT',
//     '7003': 'EXPIRY TIME',
//     '7004': 'ACTIVE POTENCY',
//     '7005': 'CATCH AREA',
//     '7006': 'FIRST FREEZE DATE',
//     '7007': 'HARVEST DATE',
//     '7008': 'AQUATIC SPECIES',
//     '7009': 'FISHING GEAR TYPE',
//     '7010': 'PROD METHOD',
//     '7011': 'TEST BY DATE',
//     '7020': 'REFURB LOT',
//     '7021': 'FUNC STAT',
//     '7022': 'REV STAT',
//     '7023': 'GIAI - ASSEMBLY',
//     '7030': 'PROCESSOR # 0',
//     '7031': 'PROCESSOR # 1',
//     '7032': 'PROCESSOR # 2',
//     '7033': 'PROCESSOR # 3',
//     '7034': 'PROCESSOR # 4',
//     '7035': 'PROCESSOR # 5',
//     '7036': 'PROCESSOR # 6',
//     '7037': 'PROCESSOR # 7',
//     '7038': 'PROCESSOR # 8',
//     '7039': 'PROCESSOR # 9',
//     '7040': 'UIC+EXT',
//     '7041': 'UFRGT UNIT TYPE',
//     '710': 'NHRN PZN',
//     '711': 'NHRN CIP',
//     '712': 'NHRN CN',
//     '713': 'NHRN DRN',
//     '714': 'NHRN AIM',
//     '715': 'NHRN NDC',
//     '716': 'NHRN AIC',
//     '7230': 'CERT # 0',
//     '7231': 'CERT # 1',
//     '7232': 'CERT # 2',
//     '7233': 'CERT # 3',
//     '7234': 'CERT # 4',
//     '7235': 'CERT # 5',
//     '7236': 'CERT # 6',
//     '7237': 'CERT # 7',
//     '7238': 'CERT # 8',
//     '7239': 'CERT # 9',
//     '7240': 'PROTOCOL',
//     '7241': 'AIDC MEDIA TYPE',
//     '7242': 'VCN',
//     '7250': 'DOB',
//     '7251': 'DOB TIME',
//     '7252': 'BIO SEX',
//     '7253': 'FAMILY NAME',
//     '7254': 'GIVEN NAME',
//     '7255': 'SUFFIX',
//     '7256': 'FULL NAME',
//     '7257': 'PERSON ADDR',
//     '7258': 'BIRTH SEQUENCE',
//     '7259': 'BABY',
//     '8001': 'DIMENSIONS',
//     '8002': 'CMT No.',
//     '8003': 'GRAI',
//     '8004': 'GIAI',
//     '8005': 'PRICE PER UNIT',
//     '8006': 'ITIP',
//     '8007': 'IBAN',
//     '8008': 'PROD TIME',
//     '8009': 'OPTSEN',
//     '8010': 'CPID',
//     '8011': 'CPID SERIAL',
//     '8012': 'VERSION',
//     '8013': 'GMN',
//     '8014': 'MUDI',
//     '8017': 'GSRN - PROVIDER',
//     '8018': 'GSRN - RECIPIENT',
//     '8019': 'SRIN',
//     '8020': 'REF No.',
//     '8026': 'ITIP CONTENT',
//     '8030': 'DIGSIG',
//     '8110': 'Coupon code for North America',
//     '8111': 'LOYALTY POINTS',
//     '8112': 'Positive offer code for North America',
//     '8200': 'PRODUCT URL',
//     '90': 'INTERNAL',
//     '91': 'INTERNAL',
//     '92': 'INTERNAL',
//     '93': 'INTERNAL',
//     '94': 'INTERNAL',
//     '95': 'INTERNAL',
//     '96': 'INTERNAL',
//     '97': 'INTERNAL',
//     '98': 'INTERNAL',
//     '99': 'INTERNAL',
//     // Add more AI codes and their shortened names as required
//   };
//
//
//   // TableRow for displaying AI name and description
//   TableRow buildTableRow(String aiCode, String value) {
//     String aiName = aiDescriptionMap[aiCode] ?? "Unknown AI"; // Get AI name from the map
//     return TableRow(
//       children: [
//         Padding(
//           padding: const EdgeInsets.all(8.0),
//           child: Text(
//             aiName,
//             style: const TextStyle(
//               fontWeight: FontWeight.bold,
//               color: Colors.white,
//             ),
//           ),
//         ),
//         TableCell(
//           verticalAlignment: TableCellVerticalAlignment.fill,
//           child: Container(
//             width: 1,
//             color: Colors.white, // White vertical line as separator
//           ),
//         ),
//         Padding(
//           padding: const EdgeInsets.all(8.0),
//           child: Text(
//             value,
//             style: const TextStyle(color: Colors.white),
//           ),
//         ),
//       ],
//     );
//   }
//
// // Helper function to format date-time strings
//   String formatDate(String input) {
//     try {
//       // Parse the date-time string
//       final date = DateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse(input);
//
//       // Format the date to a more readable format, e.g., "30 Apr 2027"
//       return DateFormat("dd MMM yyyy").format(date);
//     } catch (e) {
//       // Return input as is if it's not a valid date
//       return input;
//     }
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       backgroundColor: const Color(0xFF1E1E1E), // Dark background
//       appBar: AppBar(
//         backgroundColor: const Color(0xFF1E1E1E),
//         leading: GestureDetector(
//           onTap: () => Navigator.pop(context),
//           child: Container(
//             margin: const EdgeInsets.all(8),
//             decoration: BoxDecoration(
//               color: const Color(0xFF333333),
//               borderRadius: BorderRadius.circular(8),
//             ),
//             child: const Icon(Icons.arrow_back, color: Colors.white, size: 25),
//           ),
//         ),
//         title: const Text(
//           "Parsed Barcode Details",
//           style: TextStyle(
//             fontSize: 18,
//             fontWeight: FontWeight.w600,
//             color: Colors.white,
//           ),
//         ),
//         centerTitle: true,
//       ),
//       body: Padding(
//         padding: const EdgeInsets.all(16.0),
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.start,
//           children: [
//             // Display Raw Barcode Label
//             const Text(
//               'Raw Barcode:',
//               style: TextStyle(
//                 color: Colors.white,
//                 fontSize: 15,
//                 fontWeight: FontWeight.bold,
//               ),
//             ),
//             const SizedBox(height: 10),
//
//             // Display Raw Barcode Value dynamically
//             Container(
//               width: double.infinity,
//               padding: const EdgeInsets.all(15),
//               decoration: BoxDecoration(
//                 color: const Color(0xFF5cc079),
//                 borderRadius: BorderRadius.circular(15),
//                 border: Border.all(
//                   color: Colors.white, // White border to match the design
//                   width: 1,
//                 ),
//               ),
//               child: Text(
//                 rawBarcode, // Display the dynamic raw barcode value
//                 style: const TextStyle(
//                   color: Colors.white,
//                   fontSize: 14,
//                   fontWeight: FontWeight.w500,
//                 ),
//                 maxLines: 3,
//                 overflow: TextOverflow.ellipsis,
//               ),
//             ),
//             const SizedBox(height: 20),
//
//             // Display Parsed Data Label
//             const Text(
//               'Parsed Data:',
//               style: TextStyle(
//                 color: Colors.white,
//                 fontSize: 15,
//                 fontWeight: FontWeight.bold,
//               ),
//             ),
//             const SizedBox(height: 10),
//             Expanded(
//               child: SingleChildScrollView(
//                 child: Container(
//                   decoration: BoxDecoration(
//                     color: Color(0xFF5cc079), // Table background color
//                     borderRadius: BorderRadius.circular(15), // Rounded corners for the container
//                     border: Border.all(color: Colors.white, width: 1), // Border around the container
//                   ),
//                   padding: const EdgeInsets.only(left: 10, right: 10),
//                   child: Column(
//                     children: [
//                       Table(
//                         columnWidths: const {
//                           0: FlexColumnWidth(2),
//                           1: FixedColumnWidth(1),
//                           2: FlexColumnWidth(3.5),
//                         },
//                         children: [
//                           // Header row with column names
//                           TableRow(
//                             decoration: BoxDecoration(color: Colors.grey), // Background color for the header row
//                             children: [
//                               Padding(
//                                 padding: const EdgeInsets.all(8.0),
//                                 child: Text('Key', style: TextStyle(fontWeight: FontWeight.bold)),
//                               ),
//                               TableCell(
//                                 verticalAlignment: TableCellVerticalAlignment.fill,
//                                 child: Container(
//                                   width: 1,
//                                   color: Colors.white, // White vertical line as separator
//                                 ),
//                               ),
//                               Padding(
//                                 padding: const EdgeInsets.all(8.0),
//                                 child: Text('Value', style: TextStyle(fontWeight: FontWeight.bold)),
//                               ),
//                             ],
//                           ),
//                           // Data rows
//                           ...parsedData.entries
//                               .where((entry) => entry.key != 'rawBarcode') // Exclude the rawBarcode field
//                               .map((entry) {
//                             String value = entry.value;
//                             // Check if the value is a date-time string and format it
//                             if (value.contains('-') && value.contains(' ') && value.length > 10) {
//                               value = formatDate(value);
//                             }
//                             return TableRow(
//                               decoration: BoxDecoration(color: Color(0xFF5cc079)), // Background color for data rows
//                               children: [
//                                 Padding(
//                                   padding: const EdgeInsets.all(8.0),
//                                   child: Text(entry.key, style: TextStyle(fontWeight: FontWeight.normal, color: Colors.white)),
//                                 ),
//                                 TableCell(
//                                   verticalAlignment: TableCellVerticalAlignment.fill,
//                                   child: Container(
//                                     width: 1,
//                                     color: Colors.white, // White vertical line as separator
//                                   ),
//                                 ),
//                                 Padding(
//                                   padding: const EdgeInsets.all(8.0),
//                                   child: Text(value, style: TextStyle(fontWeight: FontWeight.normal, color: Colors.white)),
//                                 ),
//                               ],
//                             );
//                           }).toList(),
//                         ],
//                       ),
//                     ],
//                   ),
//                 ),
//               ),
//             ),
//             // Container for parsed data rows
//             Expanded(
//               child: SingleChildScrollView(
//                 child: Container(
//                   decoration: BoxDecoration(
//                     color: Color(0xFF5cc079), // Table background color
//                     borderRadius: BorderRadius.circular(15), // Rounded corners for the container
//                     border: Border.all(color: Colors.white, width: 1), // Border around the container
//                   ),
//                   padding: const EdgeInsets.only(left: 10, right: 10),
//                   child: Column(
//                     children: [
//                       Table(
//                         columnWidths: const {
//                           0: FlexColumnWidth(2),
//                           1: FixedColumnWidth(1),
//                           2: FlexColumnWidth(3.5),
//                         },
//                         children: parsedData.entries
//                             .where((entry) => entry.key != 'rawBarcode') // Exclude the rawBarcode field
//                             .map((entry) {
//                           String value = entry.value;
//                           // Check if the value is a date-time string and format it
//                           if (value.contains('-') && value.contains(' ') && value.length > 10) {
//                             value = formatDate(value);
//                           }
//                           return buildTableRow(entry.key, value);
//                         }).toList(),
//                       ),
//                     ],
//                   ),
//                 ),
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }



import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

class ParsedBarcodeScreen extends StatelessWidget {
  final Map<String, String> parsedData;
  final String rawBarcode;

  ParsedBarcodeScreen({super.key, required this.parsedData, required this.rawBarcode});

    // AI code to name and description mapping
  final Map<String, String> aiDescriptionMap = {
    '00': 'SSCC',
    '01': 'GTIN',
    '02': 'Content',
    '03': 'MtO GTIN',
    '10': 'Batch No',
    '11': 'Prod Date',
    '12': 'Due Date',
    '13': 'Pack Date',
    '15': 'Best Before',
    '16': 'Sell By',
    '17': 'Expiry Date',
    '20': 'Variant',
    '21': 'Serial No',
    '22': 'CPV',
    '235': 'TPX',
    '240': 'Additional ID',
    '241': 'Cust.Part No.',
    '242': 'MTO Variant',
    '243': 'PCN',
    '250': 'Secondary Serial',
    '251': 'Ref to Source',
    '253': 'GDTI',
    '254': 'GLN Extension',
    '255': 'GCN',
    '30': 'Var Count',
    '3100': 'Net Weight (kg)',
    '3101': 'Net Weight (kg)',
    '3102': 'Net Weight (kg)',
    '3103': 'Net Weight (kg)',
    '3104': 'Net Weight (kg)',
    '3105': 'Net Weight (kg)',
    '3110': 'Length (m)',
    '3111': 'Length (m)',
    '3112': 'Length (m)',
    '3113': 'Length (m)',
    '3114': 'Length (m)',
    '3115': 'Length (m)',
    '3120': 'Width (m)',
    '3121': 'Width (m)',
    '3122': 'Width (m)',
    '3123': 'Width (m)',
    '3124': 'Width (m)',
    '3125': 'Width (m)',
    '3130': 'Height (m)',
    '3131': 'Height (m)',
    '3132': 'Height (m)',
    '3133': 'Height (m)',
    '3134': 'Height (m)',
    '3135': 'Height (m)',
    '3140': 'Area (m²)',
    '3141': 'Area (m²)',
    '3142': 'Area (m²)',
    '3143': 'Area (m²)',
    '3144': 'Area (m²)',
    '3145': 'Area (m²)',
    '3150': 'Net Volume (l)',
    '3151': 'Net Volume (l)',
    '3152': 'Net Volume (l)',
    '3153': 'Net Volume (l)',
    '3154': 'Net Volume (l)',
    '3155': 'Net Volume (l)',
    '3160': 'Net Volume (m³)',
    '3161': 'Net Volume (m³)',
    '3162': 'Net Volume (m³)',
    '3163': 'Net Volume (m³)',
    '3164': 'Net Volume (m³)',
    '3165': 'Net Volume (m³)',
    '3200': 'Net Weight (lb)',
    '3201': 'Net Weight (lb)',
    '3202': 'Net Weight (lb)',
    '3203': 'Net Weight (lb)',
    '3204': 'Net Weight (lb)',
    '3205': 'Net Weight (lb)',
    '3210': 'Length (in)',
    '3211': 'Length (in)',
    '3212': 'Length (in)',
    '3213': 'Length (in)',
    '3214': 'Length (in)',
    '3215': 'Length (in)',
    '3220': 'Length (ft)',
    '3221': 'Length (ft)',
    '3222': 'Length (ft)',
    '3223': 'Length (ft)',
    '3224': 'Length (ft)',
    '3225': 'Length (ft)',
    '3230': 'Length (yd)',
    '3231': 'Length (yd)',
    '3232': 'Length (yd)',
    '3233': 'Length (yd)',
    '3234': 'Length (yd)',
    '3235': 'Length (yd)',
    '3240': 'Width (in)',
    '3241': 'Width (in)',
    '3242': 'Width (in)',
    '3243': 'Width (in)',
    '3244': 'Width (in)',
    '3245': 'Width (in)',
    '3250': 'Width (ft)',
    '3251': 'Width (ft)',
    '3252': 'Width (ft)',
    '3253': 'Width (ft)',
    '3254': 'Width (ft)',
    '3255': 'Width (ft)',
    '3260': 'Width (yd)',
    '3261': 'Width (yd)',
    '3262': 'Width (yd)',
    '3263': 'Width (yd)',
    '3264': 'Width (yd)',
    '3265': 'Width (yd)',
    '3270': 'Height (in)',
    '3271': 'Height (in)',
    '3272': 'Height (in)',
    '3273': 'Height (in)',
    '3274': 'Height (in)',
    '3275': 'Height (in)',
    '3280': 'Height (ft)',
    '3281': 'Height (ft)',
    '3282': 'Height (ft)',
    '3283': 'Height (ft)',
    '3284': 'Height (ft)',
    '3285': 'Height (ft)',
    '3290': 'Height (yd)',
    '3291': 'Height (yd)',
    '3292': 'Height (yd)',
    '3293': 'Height (yd)',
    '3294': 'Height (yd)',
    '3295': 'Height (yd)',
    '3300': 'Gross Weight (kg)',
    '3301': 'Gross Weight (kg)',
    '3302': 'Gross Weight (kg)',
    '3303': 'Gross Weight (kg)',
    '3304': 'Gross Weight (kg)',
    '3305': 'Gross Weight (kg)',
    '3310': 'Length (m), log',
    '3311': 'Length (m), log',
    '3312': 'Length (m), log',
    '3313': 'Length (m), log',
    '3314': 'Length (m), log',
    '3315': 'Length (m), log',
    '3320': 'Width (m), log',
    '3321': 'Width (m), log',
    '3322': 'Width (m), log',
    '3323': 'Width (m), log',
    '3324': 'Width (m), log',
    '3325': 'Width (m), log',
    '3330': 'Height (m), log',
    '3331': 'Height (m), log',
    '3332': 'Height (m), log',
    '3333': 'Height (m), log',
    '3334': 'Height (m), log',
    '3335': 'Height (m), log',
    '3340': 'Area (m²), log',
    '3341': 'Area (m²), log',
    '3342': 'Area (m²), log',
    '3343': 'Area (m²), log',
    '3344': 'Area (m²), log',
    '3345': 'Area (m²), log',
    '3350': 'Volume (l), log',
    '3351': 'Volume (l), log',
    '3352': 'Volume (l), log',
    '3353': 'Volume (l), log',
    '3354': 'Volume (l), log',
    '3355': 'Volume (l), log',
    '3360': 'Volume (m³), log',
    '3361': 'Volume (m³), log',
    '3362': 'Volume (m³), log',
    '3363': 'Volume (m³), log',
    '3364': 'Volume (m³), log',
    '3365': 'Volume (m³), log',
    '3400': 'Gross Weight (lb)',
    '3401': 'Gross Weight (lb)',
    '3402': 'Gross Weight (lb)',
    '3403': 'Gross Weight (lb)',
    '3404': 'Gross Weight (lb)',
    '3405': 'Gross Weight (lb)',
    '3453': 'WIDTH (ft), log',
    '3454': 'WIDTH (ft), log',
    '3455': 'WIDTH (ft), log',
    '3460': 'WIDTH (yd), log',
    '3461': 'WIDTH (yd), log',
    '3462': 'WIDTH (yd), log',
    '3463': 'WIDTH (yd), log',
    '3464': 'WIDTH (yd), log',
    '3465': 'WIDTH (yd), log',
    '3470': 'HEIGHT (in), log',
    '3471': 'HEIGHT (in), log',
    '3472': 'HEIGHT (in), log',
    '3473': 'HEIGHT (in), log',
    '3474': 'HEIGHT (in), log',
    '3475': 'HEIGHT (in), log',
    '3480': 'HEIGHT (ft), log',
    '3481': 'HEIGHT (ft), log',
    '3482': 'HEIGHT (ft), log',
    '3483': 'HEIGHT (ft), log',
    '3484': 'HEIGHT (ft), log',
    '3485': 'HEIGHT (ft), log',
    '3490': 'HEIGHT (yd), log',
    '3491': 'HEIGHT (yd), log',
    '3492': 'HEIGHT (yd), log',
    '3493': 'HEIGHT (yd), log',
    '3494': 'HEIGHT (yd), log',
    '3495': 'HEIGHT (yd), log',
    '3500': 'AREA (in²)',
    '3501': 'AREA (in²)',
    '3502': 'AREA (in²)',
    '3503': 'AREA (in²)',
    '3504': 'AREA (in²)',
    '3505': 'AREA (in²)',
    '3510': 'AREA (ft²)',
    '3511': 'AREA (ft²)',
    '3512': 'AREA (ft²)',
    '3513': 'AREA (ft²)',
    '3514': 'AREA (ft²)',
    '3515': 'AREA (ft²)',
    '3520': 'AREA (yd²)',
    '3521': 'AREA (yd²)',
    '3522': 'AREA (yd²)',
    '3523': 'AREA (yd²)',
    '3524': 'AREA (yd²)',
    '3525': 'AREA (yd²)',
    '3530': 'AREA (in²), log',
    '3531': 'AREA (in²), log',
    '3532': 'AREA (in²), log',
    '3533': 'AREA (in²), log',
    '3534': 'AREA (in²), log',
    '3535': 'AREA (in²), log',
    '3540': 'AREA (ft²), log',
    '3541': 'AREA (ft²), log',
    '3542': 'AREA (ft²), log',
    '3543': 'AREA (ft²), log',
    '3544': 'AREA (ft²), log',
    '3545': 'AREA (ft²), log',
    '3550': 'AREA (yd²), log',
    '3551': 'AREA (yd²), log',
    '3552': 'AREA (yd²), log',
    '3553': 'AREA (yd²), log',
    '3554': 'AREA (yd²), log',
    '3555': 'AREA (yd²), log',
    '3560': 'NET WEIGHT (troy oz)',
    '3561': 'NET WEIGHT (troy oz)',
    '3562': 'NET WEIGHT (troy oz)',
    '3563': 'NET WEIGHT (troy oz)',
    '3564': 'NET WEIGHT (troy oz)',
    '3565': 'NET WEIGHT (troy oz)',
    '3570': 'NET VOLUME (oz)',
    '3571': 'NET VOLUME (oz)',
    '3572': 'NET VOLUME (oz)',
    '3573': 'NET VOLUME (oz)',
    '3574': 'NET VOLUME (oz)',
    '3575': 'NET VOLUME (oz)',
    '3600': 'NET VOLUME (qt)',
    '3601': 'NET VOLUME (qt)',
    '3602': 'NET VOLUME (qt)',
    '3603': 'NET VOLUME (qt)',
    '3604': 'NET VOLUME (qt)',
    '3605': 'NET VOLUME (qt)',
    '3610': 'NET VOLUME (gal.)',
    '3611': 'NET VOLUME (gal.)',
    '3612': 'NET VOLUME (gal.)',
    '3613': 'NET VOLUME (gal.)',
    '3614': 'NET VOLUME (gal.)',
    '3615': 'NET VOLUME (gal.)',
    '3620': 'VOLUME (qt), log',
    '3621': 'VOLUME (qt), log',
    '3622': 'VOLUME (qt), log',
    '3623': 'VOLUME (qt), log',
    '3624': 'VOLUME (qt), log',
    '3625': 'VOLUME (qt), log',
    '3630': 'VOLUME (gal.), log',
    '3631': 'VOLUME (gal.), log',
    '3632': 'VOLUME (gal.), log',
    '3633': 'VOLUME (gal.), log',
    '3634': 'VOLUME (gal.), log',
    '3635': 'VOLUME (gal.), log',
    '3640': 'VOLUME (in³)',
    '3641': 'VOLUME (in³)',
    '3642': 'VOLUME (in³)',
    '3643': 'VOLUME (in³)',
    '3644': 'VOLUME (in³)',
    '3645': 'VOLUME (in³)',
    '3650': 'VOLUME (ft³)',
    '3651': 'VOLUME (ft³)',
    '3652': 'VOLUME (ft³)',
    '3653': 'VOLUME (ft³)',
    '3654': 'VOLUME (ft³)',
    '3655': 'VOLUME (ft³)',
    '3660': 'VOLUME (yd³)',
    '3661': 'VOLUME (yd³)',
    '3662': 'VOLUME (yd³)',
    '3663': 'VOLUME (yd³)',
    '3664': 'VOLUME (yd³)',
    '3665': 'VOLUME (yd³)',
    '3670': 'VOLUME (in³), log',
    '3671': 'VOLUME (in³), log',
    '3672': 'VOLUME (in³), log',
    '3673': 'VOLUME (in³), log',
    '3674': 'VOLUME (in³), log',
    '3675': 'VOLUME (in³), log',
    '3680': 'VOLUME (ft³), log',
    '3681': 'VOLUME (ft³), log',
    '3682': 'VOLUME (ft³), log',
    '3683': 'VOLUME (ft³), log',
    '3684': 'VOLUME (ft³), log',
    '3685': 'VOLUME (ft³), log',
    '3690': 'VOLUME (yd³), log',
    '3691': 'VOLUME (yd³), log',
    '3692': 'VOLUME (yd³), log',
    '3693': 'VOLUME (yd³), log',
    '3694': 'VOLUME (yd³), log',
    '3695': 'VOLUME (yd³), log',
    '37': 'COUNT',
    '3900': 'AMOUNT',
    '3901': 'AMOUNT',
    '3902': 'AMOUNT',
    '3903': 'AMOUNT',
    '3904': 'AMOUNT',
    '3905': 'AMOUNT',
    '3906': 'AMOUNT',
    '3907': 'AMOUNT',
    '3908': 'AMOUNT',
    '3909': 'AMOUNT',
    '3910': 'AMOUNT',
    '3911': 'AMOUNT',
    '3912': 'AMOUNT',
    '3913': 'AMOUNT',
    '3914': 'AMOUNT',
    '3915': 'AMOUNT',
    '3916': 'AMOUNT',
    '3917': 'AMOUNT',
    '3918': 'AMOUNT',
    '3919': 'AMOUNT',
    '3920': 'PRICE',
    '3921': 'PRICE',
    '3922': 'PRICE',
    '3923': 'PRICE',
    '3924': 'PRICE',
    '3925': 'PRICE',
    '3926': 'PRICE',
    '3927': 'PRICE',
    '3928': 'PRICE',
    '3929': 'PRICE',
    '3930': 'PRICE',
    '3931': 'PRICE',
    '3932': 'PRICE',
    '3933': 'PRICE',
    '3934': 'PRICE',
    '3935': 'PRICE',
    '3936': 'PRICE',
    '3937': 'PRICE',
    '3938': 'PRICE',
    '3939': 'PRICE',
    '3940': 'PRCNT OFF',
    '3941': 'PRCNT OFF',
    '3942': 'PRCNT OFF',
    '3943': 'PRCNT OFF',
    '3950': 'PRICE/UoM',
    '3951': 'PRICE/UoM',
    '3952': 'PRICE/UoM',
    '3953': 'PRICE/UoM',
    '3954': 'PRICE/UoM',
    '3955': 'PRICE/UoM',
    '400': 'ORDER NUMBER',
    '401': 'GINC',
    '402': 'GSIN',
    '403': 'ROUTE',
    '410': 'SHIP TO LOC',
    '411': 'BILL TO',
    '412': 'PURCHASE FROM',
    '413': 'SHIP FOR LOC',
    '414': 'LOC No.',
    '415': 'PAY TO',
    '416': 'PROD/SERV LOC',
    '417': 'PARTY',
    '420': 'SHIP TO POST',
    '421': 'SHIP TO POST',
    '422': 'ORIGIN',
    '423': 'COUNTRY INITIAL PROCESS',
    '424': 'COUNTRY PROCESS',
    '425': 'COUNTRY DISASSEMBLY',
    '426': 'COUNTRY FULL PROCESS',
    '427': 'ORIGIN SUBDIVISION',
    '4300': 'SHIP TO COMP',
    '4301': 'SHIP TO NAME',
    '4302': 'SHIP TO ADD1',
    '4303': 'SHIP TO ADD2',
    '4304': 'SHIP TO SUB',
    '4305': 'SHIP TO LOC',
    '4306': 'SHIP TO REG',
    '4307': 'SHIP TO COUNTRY',
    '4308': 'SHIP TO PHONE',
    '4309': 'SHIP TO GEO',
    '4310': 'RTN TO COMP',
    '4311': 'RTN TO NAME',
    '4312': 'RTN TO ADD1',
    '4313': 'RTN TO ADD2',
    '4314': 'RTN TO SUB',
    '4315': 'RTN TO LOC',
    '4316': 'RTN TO REG',
    '4317': 'RTN TO COUNTRY',
    '4318': 'RTN TO POST',
    '4319': 'RTN TO PHONE',
    '4320': 'SRV DESCRIPTION',
    '4321': 'DANGEROUS GOODS',
    '4322': 'AUTH LEAVE',
    '4323': 'SIG REQUIRED',
    '4324': 'NBEF DEL DT',
    '4325': 'NAFT DEL DT',
    '4326': 'REL DATE',
    '4330': 'MAX TEMP F',
    '4331': 'MAX TEMP C',
    '4332': 'MIN TEMP F',
    '4333': 'MIN TEMP C',
    '7001': 'NSN',
    '7002': 'MEAT CUT',
    '7003': 'EXPIRY TIME',
    '7004': 'ACTIVE POTENCY',
    '7005': 'CATCH AREA',
    '7006': 'FIRST FREEZE DATE',
    '7007': 'HARVEST DATE',
    '7008': 'AQUATIC SPECIES',
    '7009': 'FISHING GEAR TYPE',
    '7010': 'PROD METHOD',
    '7011': 'TEST BY DATE',
    '7020': 'REFURB LOT',
    '7021': 'FUNC STAT',
    '7022': 'REV STAT',
    '7023': 'GIAI - ASSEMBLY',
    '7030': 'PROCESSOR # 0',
    '7031': 'PROCESSOR # 1',
    '7032': 'PROCESSOR # 2',
    '7033': 'PROCESSOR # 3',
    '7034': 'PROCESSOR # 4',
    '7035': 'PROCESSOR # 5',
    '7036': 'PROCESSOR # 6',
    '7037': 'PROCESSOR # 7',
    '7038': 'PROCESSOR # 8',
    '7039': 'PROCESSOR # 9',
    '7040': 'UIC+EXT',
    '7041': 'UFRGT UNIT TYPE',
    '710': 'NHRN PZN',
    '711': 'NHRN CIP',
    '712': 'NHRN CN',
    '713': 'NHRN DRN',
    '714': 'NHRN AIM',
    '715': 'NHRN NDC',
    '716': 'NHRN AIC',
    '7230': 'CERT # 0',
    '7231': 'CERT # 1',
    '7232': 'CERT # 2',
    '7233': 'CERT # 3',
    '7234': 'CERT # 4',
    '7235': 'CERT # 5',
    '7236': 'CERT # 6',
    '7237': 'CERT # 7',
    '7238': 'CERT # 8',
    '7239': 'CERT # 9',
    '7240': 'PROTOCOL',
    '7241': 'AIDC MEDIA TYPE',
    '7242': 'VCN',
    '7250': 'DOB',
    '7251': 'DOB TIME',
    '7252': 'BIO SEX',
    '7253': 'FAMILY NAME',
    '7254': 'GIVEN NAME',
    '7255': 'SUFFIX',
    '7256': 'FULL NAME',
    '7257': 'PERSON ADDR',
    '7258': 'BIRTH SEQUENCE',
    '7259': 'BABY',
    '8001': 'DIMENSIONS',
    '8002': 'CMT No.',
    '8003': 'GRAI',
    '8004': 'GIAI',
    '8005': 'PRICE PER UNIT',
    '8006': 'ITIP',
    '8007': 'IBAN',
    '8008': 'PROD TIME',
    '8009': 'OPTSEN',
    '8010': 'CPID',
    '8011': 'CPID SERIAL',
    '8012': 'VERSION',
    '8013': 'GMN',
    '8014': 'MUDI',
    '8017': 'GSRN - PROVIDER',
    '8018': 'GSRN - RECIPIENT',
    '8019': 'SRIN',
    '8020': 'REF No.',
    '8026': 'ITIP CONTENT',
    '8030': 'DIGSIG',
    '8110': 'Coupon code for North America',
    '8111': 'LOYALTY POINTS',
    '8112': 'Positive offer code for North America',
    '8200': 'PRODUCT URL',
    '90': 'INTERNAL',
    '91': 'INTERNAL',
    '92': 'INTERNAL',
    '93': 'INTERNAL',
    '94': 'INTERNAL',
    '95': 'INTERNAL',
    '96': 'INTERNAL',
    '97': 'INTERNAL',
    '98': 'INTERNAL',
    '99': 'INTERNAL',
    // Add more AI codes and their shortened names as required
  };

  // Helper function to format date-time strings
  String formatDate(String input) {
    try {
      final date = DateFormat("yyyy-MM-dd").parse(input);
      return DateFormat("dd MMM yyyy").format(date);
    } catch (e) {
      return input; // Return the input if it's not a valid date
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF1E1E1E), // Dark background
      appBar: AppBar(
        backgroundColor: const Color(0xFF1E1E1E),
        leading: GestureDetector(
          onTap: () => Navigator.pop(context),
          child: Container(
            margin: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: const Color(0xFF333333),
              borderRadius: BorderRadius.circular(8),
            ),
            child: const Icon(Icons.arrow_back, color: Colors.white, size: 25),
          ),
        ),
        title: const Text(
          "Parsed Barcode Details",
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.w600,
            color: Colors.white,
          ),
        ),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Display Raw Barcode Label
            const Text(
              'Raw Barcode:',
              style: TextStyle(
                color: Colors.white,
                fontSize: 15,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 10),

            // Display Raw Barcode Value dynamically
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(15),
              decoration: BoxDecoration(
                color: const Color(0xFF5cc079),
                borderRadius: BorderRadius.circular(10),
                border: Border.all(
                  color: Colors.white, // White border to match the design
                  width: 1,
                ),
              ),
              child: Text(
                rawBarcode, // Display the dynamic raw barcode value
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 14,
                  fontWeight: FontWeight.w500,
                ),
                maxLines: 3,
                overflow: TextOverflow.ellipsis,
              ),
            ),
            const SizedBox(height: 20),

            // Display Parsed Data Label
            const Text(
              'Parsed Data:',
              style: TextStyle(
                color: Colors.white,
                fontSize: 15,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 10),

            // DataTable for Parsed Data
            Expanded(
              child: SingleChildScrollView(
                child: Container(
                  width: double.infinity, // Set width to screen width
                  decoration: BoxDecoration(
                    color: Color(0xFF5cc079), // Table background color
                    borderRadius: BorderRadius.circular(10), // Rounded corners for the container
                    border: Border.all(color: Colors.white, width: 1), // Border around the container
                  ),
                  padding: const EdgeInsets.only(left: 05, right: 05),
                  child: DataTable(
                    columnSpacing: 0,
                    horizontalMargin: 0,
                    columns: [
                      DataColumn(
                        label: Text(
                          'Ai Identifier',
                          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.white),
                        ),
                      ),
                      DataColumn(
                        label: Text(
                          'Identifier Value',
                          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.white),
                        ),
                      ),
                    ],
                    rows: parsedData.entries
                        .where((entry) => entry.key != 'rawBarcode') // Exclude the rawBarcode field
                        .map<DataRow>((entry) {
                      String value = entry.value;
                      // Check if the value is a date-time string and format it
                      if (value.contains('-') && value.contains(' ') && value.length > 10) {
                        value = formatDate(value);
                      }
                      return DataRow(
                        cells: [
                          DataCell(
                            Padding(
                              padding: const EdgeInsets.all(0),
                              child: Text(
                                aiDescriptionMap[entry.key] ?? entry.key,
                                style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
                              ),
                            ),
                          ),
                          DataCell(
                            Padding(
                              padding: const EdgeInsets.all(0),
                              child: Text(
                                value,
                                style: TextStyle(color: Colors.white),
                              ),
                            ),
                          ),
                        ],
                      );
                    }).toList(),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
